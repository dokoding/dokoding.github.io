<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://dokoding.github.io//</id><title>도코딩블로그</title><subtitle>자바스크립트, 타입스크립트, 리액트, 넥스트, 서버리스</subtitle> <updated>2023-09-19T20:42:22+09:00</updated> <author> <name></name> <uri>https://dokoding.github.io//</uri> </author><link rel="self" type="application/atom+xml" href="https://dokoding.github.io//feed.xml"/><link rel="alternate" type="text/html" hreflang="en" href="https://dokoding.github.io//"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Tailwind의 마법사, Preflight가 해주는 일</title><link href="https://dokoding.github.io//posts/Tailwind%EC%9D%98-%EB%A7%88%EB%B2%95%EC%82%AC,-Preflight%EA%B0%80-%ED%95%B4%EC%A3%BC%EB%8A%94-%EC%9D%BC/" rel="alternate" type="text/html" title="Tailwind의 마법사, Preflight가 해주는 일" /><published>2023-09-05T20:00:00+09:00</published> <updated>2023-09-19T20:41:46+09:00</updated> <id>https://dokoding.github.io//posts/Tailwind%EC%9D%98-%EB%A7%88%EB%B2%95%EC%82%AC,-Preflight%EA%B0%80-%ED%95%B4%EC%A3%BC%EB%8A%94-%EC%9D%BC/</id> <content src="https://dokoding.github.io//posts/Tailwind%EC%9D%98-%EB%A7%88%EB%B2%95%EC%82%AC,-Preflight%EA%B0%80-%ED%95%B4%EC%A3%BC%EB%8A%94-%EC%9D%BC/" /> <author> <name></name> </author> <category term="CSS" /> <summary> 안녕하세요, 오늘은 웹 디자인과 스타일링의 마법사라고 불릴 만한 Tailwind의 Preflight에 대해 얘기해 볼 거예요. 왜 마법사라고 부르냐구요? 이유는 바로 이어서 알려 드릴게요. 😎 브라우저, 너의 스타일은 내가 지워주마! 🧹 브라우저는 각각 고유한 스타일을 가지고 있어서 같은 CSS를 주어도 살짝씩 다르게 출력됩니다. 하지만 이때 Preflight가 등장하는 순간! Preflight는 브라우저가 마음대로 입힌 스타일을 다 지워버립니다. 이렇게 되면 다른 브라우저 일지라도 일관된 UI를 만들 수 있죠. 뭐가 어떻게 변하는데? 🤔 모든 HTML 요소의 margin과 padding을 없앱니다. &amp;lt;h1&amp;gt;, &amp;lt;h2&amp;gt;, &amp;lt;h3&amp;gt; 등 헤딩에 적용된 스타일... </summary> </entry> <entry><title>object-fit으로 이미지 안짤리게 사용하기</title><link href="https://dokoding.github.io//posts/object-fit%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%95%88%EC%A7%A4%EB%A6%AC%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="object-fit으로 이미지 안짤리게 사용하기" /><published>2023-09-04T20:00:00+09:00</published> <updated>2023-09-19T20:41:46+09:00</updated> <id>https://dokoding.github.io//posts/object-fit%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%95%88%EC%A7%A4%EB%A6%AC%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</id> <content src="https://dokoding.github.io//posts/object-fit%EC%9C%BC%EB%A1%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%95%88%EC%A7%A4%EB%A6%AC%EA%B2%8C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/" /> <author> <name></name> </author> <category term="CSS" /> <summary> 안녕하세요, 여러분! 이미지를 웹에 어떻게 안짤리고 잘 보이게 할 수 있을까요? 오늘은 CSS의 ‘object-fit’ 속성을 통해 그 놀라운 비결을 알려드립니다! 🌈 💡 object-fit의 기본 설정: fill 🎈 이미지를 웹에 첨부하려고 하면 기본 설정으로 fill이 자동으로 적용됩니다. 하지만 fill은 이미지의 가로, 세로 비율을 무시해버려요. 그래서 이미지가 찌그러질 가능성이 크기 때문에 fill은 사실상 사용을 피하는 편이에요. &amp;lt;!-- fill 예제 --&amp;gt; &amp;lt;img src="https://dummyimage.com/200x200.png" style="object-fit: fill;" /&amp;gt; 🌟 별도로 설정하지 않으면 뭐가 되나요? 🌠 방금 말했듯이, 별도로 ... </summary> </entry> <entry><title>CSS 화면 높이 조절 이거 알면 끝나요(%, vh)</title><link href="https://dokoding.github.io//posts/CSS-%ED%99%94%EB%A9%B4-%EB%86%92%EC%9D%B4-%EC%A1%B0%EC%A0%88-%EC%9D%B4%EA%B1%B0-%EC%95%8C%EB%A9%B4-%EB%81%9D%EB%82%98%EC%9A%94(-,-vh)/" rel="alternate" type="text/html" title="CSS 화면 높이 조절 이거 알면 끝나요(%, vh)" /><published>2023-09-03T20:00:00+09:00</published> <updated>2023-09-19T20:41:46+09:00</updated> <id>https://dokoding.github.io//posts/CSS-%ED%99%94%EB%A9%B4-%EB%86%92%EC%9D%B4-%EC%A1%B0%EC%A0%88-%EC%9D%B4%EA%B1%B0-%EC%95%8C%EB%A9%B4-%EB%81%9D%EB%82%98%EC%9A%94(-,-vh)/</id> <content src="https://dokoding.github.io//posts/CSS-%ED%99%94%EB%A9%B4-%EB%86%92%EC%9D%B4-%EC%A1%B0%EC%A0%88-%EC%9D%B4%EA%B1%B0-%EC%95%8C%EB%A9%B4-%EB%81%9D%EB%82%98%EC%9A%94(-,-vh)/" /> <author> <name></name> </author> <category term="CSS" /> <summary> 안녕하세요, 여러분! 이번 글에서는 CSS로 화면 높이를 잡는 기술에 대해 핵심만 짧게 알아보겠습니다. 이 글을 끝까지 읽으시면 더이상 %와 vh중에 뭘 써야할지에 대한 고민이 사라지실거에요! 🚀 🔍 주의해야 할 흔한 실수들 CSS를 다룰 때, 특히 초보자분들이 자주 하는 실수 중 하나는 height 속성을 100%로 설정하고, 그것만으로 해결될 것이라고 생각하는 거에요. .screen-height { height: 100%; } 하지만 이렇게만 하면 대부분 변화가 없죠. 왜냐면, %는 부모 요소를 기준으로 하고, 부모 요소의 height는 기본적으로 auto로 설정되어 있기 때문이에요. 👍 html과 body 요소의 높이 조절 이럴 때, html과 body 요소의 높이를 100%로 설... </summary> </entry> <entry><title>CSS 포커스(focus) 사용하지 마세요</title><link href="https://dokoding.github.io//posts/CSS-%ED%8F%AC%EC%BB%A4%EC%8A%A4(focus)-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EB%A7%88%EC%84%B8%EC%9A%94/" rel="alternate" type="text/html" title="CSS 포커스(focus) 사용하지 마세요" /><published>2023-09-02T20:00:00+09:00</published> <updated>2023-09-19T20:41:46+09:00</updated> <id>https://dokoding.github.io//posts/CSS-%ED%8F%AC%EC%BB%A4%EC%8A%A4(focus)-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EB%A7%88%EC%84%B8%EC%9A%94/</id> <content src="https://dokoding.github.io//posts/CSS-%ED%8F%AC%EC%BB%A4%EC%8A%A4(focus)-%EC%82%AC%EC%9A%A9%ED%95%98%EC%A7%80-%EB%A7%88%EC%84%B8%EC%9A%94/" /> <author> <name></name> </author> <category term="CSS" /> <summary> 안녕하세요, 여러분! 🎉 오늘은 CSS에서 사용되는 :focus, :focus-visible, :focus-within 가상 클래스를 제대로 알아보고, 그 차이점과 사용법을 풀어내볼 거에요. 🌈 HTML 요소와 포커스의 비밀 먼저, HTML 요소(element)가 포커스를 받는다는 의미를 이해하려면, 어떤 요소만이 포커스의 주인공이 될 수 있는지 알아봐야 해요. 대표적으로 &amp;lt;a&amp;gt;, &amp;lt;input&amp;gt;, &amp;lt;select&amp;gt;, &amp;lt;button&amp;gt; 등이 있는데요, 이러한 요소들을 대화형 요소라고 불러요. 주로 사용자의 입력을 받는 용도로 사용돼요. 🎯 CSS :focus 가상 클래스의 정체 :focus는 마우스든 키보드든 뭐든지 간에 HTML 요소에 포커스가 가면, 그 요소... </summary> </entry> <entry><title>완벽한 React 프로젝트 구성을 위한 Create React App</title><link href="https://dokoding.github.io//posts/%EC%99%84%EB%B2%BD%ED%95%9C-React-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%9C-Create-React-App/" rel="alternate" type="text/html" title="완벽한 React 프로젝트 구성을 위한 Create React App" /><published>2023-08-26T20:00:00+09:00</published> <updated>2023-09-19T20:36:41+09:00</updated> <id>https://dokoding.github.io//posts/%EC%99%84%EB%B2%BD%ED%95%9C-React-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%9C-Create-React-App/</id> <content src="https://dokoding.github.io//posts/%EC%99%84%EB%B2%BD%ED%95%9C-React-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EA%B5%AC%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%9C-Create-React-App/" /> <author> <name></name> </author> <category term="React" /> <summary> 안녕하세요, 여러분! 🎉 오늘은 Create React App에 대해 살펴볼 예정입니다. React 프로젝트를 만들려면 알아야 할 것이 산더미처럼 많죠. 웹팩, 바벨, 뭐 어쩌고 저쩌고. 😱 다른 글에서 볼 수 있는 복잡한 정보는 건너뛰고, 이 글에서는 정확히 핵심만 파보겠습니다! ✨ Create React App이 뭐에요? 🤔 React를 배우고 싶지만 설정 때문에 머리 아프다면, Create React App 하나로 그런 복잡한 설정을 다 해준답니다. 😲 명령어 하나로 바로 시작하세요! 프로젝트 만드는 법 🛠 첫 번째 단계는 정말 간단합니다. 아래와 같이 터미널에 명령어를 입력하세요. $ npx create-react-app 앱이름 --use-npm ’–use-npm’ 옵션은 npm을 ... </summary> </entry> </feed>
